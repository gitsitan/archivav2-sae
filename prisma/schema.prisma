// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  groups    UserGroup[]
  auditLogs AuditLog[]
  documents Document[]
  loans     Loan[]
}

model Group {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  permissions Json
  autorisations Json
  isAdmin    Boolean    @default(true)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  users       UserGroup[]
}

model UserGroup {
  id      Int @id @default(autoincrement())
  userId  Int
  groupId Int
  user    User  @relation(fields: [userId], references: [id])
  group   Group @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  entity    String
  entityId  Int?
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Serie {
  id          Int        @id @default(autoincrement())
  code        String     @unique
  name        String
  description String?
  parentId    Int?
  level       Int        @default(1)
  dcl         Int        @default(10)
  dua         Int        @default(1)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Serie?    @relation("SerieHierarchy", fields: [parentId], references: [id])
  children    Serie[]   @relation("SerieHierarchy")
  liasses     Liasse[]
  dossiers    Dossier[]
}

model Liasse {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  serieId     Int?
  serie       Serie?         @relation(fields: [serieId], references: [id])
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  documents   Document[]
}

model Localisation {
  id          Int        @id @default(autoincrement())
  code        String?     @unique
  name        String
  parentId    Int?
  level       Int        @default(1)
  parent      Localisation?    @relation("LocalisationHierarchy", fields: [parentId], references: [id])
  children    Localisation[]   @relation("LocalisationHierarchy")
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  dossiers    Dossier[]
}

model Document {
  id              Int            @id @default(autoincrement())
  title           String
  description     String?
  documentType    DocumentType
  reference       String         @unique
  filePath        String?
  fileSize        Int?
  mimeType        String?
  status          DocumentStatus @default(ACTIVE)
  retentionPeriod Int?
  destructionDate DateTime?
  userId          Int
  dossierId       Int?
  typeId          Int?
  liasseId        Int?
  dossier         Dossier?      @relation(fields: [dossierId], references: [id])
  type            TypeDocument? @relation(fields: [typeId], references: [id])
  liasse          Liasse? @relation(fields: [liasseId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model TypeDocument {
  id          Int            @id @default(autoincrement())
  name        String
  description String?
  status      DossiersStatus @default(ACTIVE)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  documents   Document[]
}

model Dossier {
  id          Int            @id @default(autoincrement())
  description String?
  infoCompl   String?
  commentaire String?
  code        String         @unique
  status      DossiersStatus @default(ACTIVE)
  metadata    Json
  typeId      Int?
  structureId Int?
  serieId     Int?
  localisationId  Int?
  type        TypeDossier? @relation(fields: [typeId], references: [id])
  structure   Structure?     @relation(fields: [structureId], references: [id])
  serie       Serie?         @relation(fields: [serieId], references: [id])
  localisation    Localisation?       @relation(fields: [localisationId], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  documents   Document[]
  loans       Loan[]
}

model TypeDossier {
  id          Int            @id @default(autoincrement())
  name        String
  metadata    Json
  status      DossiersStatus @default(ACTIVE)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  dossiers    Dossier[]
}

model Loan {
  id         Int        @id @default(autoincrement())
  loanDate   DateTime   @default(now())
  returnDate DateTime?
  status     LoanStatus @default(ACTIVE)
  notes      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  dossierId  Int
  userId     Int
  dossier    Dossier?  @relation(fields: [dossierId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
}

model Structure {
  id        Int      @id @default(autoincrement())
  name      String
  address   String?
  phone     String?
  email     String?
  niveau    Int @default(1)
  parentId    Int?
  isActive  Boolean  @default(true)
  parent      Structure?    @relation("StructureHierarchy", fields: [parentId], references: [id])
  children    Structure[]   @relation("StructureHierarchy")
  dossiers    Dossier[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Beneficiary {
  id        Int             @id @default(autoincrement())
  name      String
  type      BeneficiaryType
  contact   String?
  address   String?
  isActive  Boolean         @default(true)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

enum UserRole {
  ADMIN
  MANAGER
  USER
  VIEWER
}

enum DocumentType {
  COMMUNIQUE
  CONVENTION
  JOURNAL
  TEXTE
  RAPPORT
  AUTRE
}

enum DocumentStatus {
  ACTIVE
  ARCHIVED
  DESTROYED
}

enum DossiersStatus {
  ACTIVE
  ARCHIVED
  DESTROYED
}

enum LoanStatus {
  ACTIVE
  RETURNED
  OVERDUE
  LOST
}

enum BeneficiaryType {
  INDIVIDUAL
  ORGANIZATION
  GOVERNMENT
  PRIVATE
}

model Options {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     Json
  category  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}